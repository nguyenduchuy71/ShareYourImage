version: '3.8'

services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/app  # Mount server directory to /app in the container
    environment:
      - SOCKET_PORT=${SOCKET_PORT}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVER_PORT=${SERVER_PORT}
    restart: unless-stopped
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      - db
      - redis
    networks:
      - db-network
      - redis-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:${SERVER_PORT} || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5

  websocket:
    build:
      context: ./socket-service
      dockerfile: Dockerfile
    volumes:
      - ./socket-service:/usr/src/app  # Mount socket-service directory to /usr/src/app in the container
    ports:
      - "${SOCKET_PORT}:${SOCKET_PORT}"
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - db-network

  redis:
    image: redis:5-alpine
    volumes:
      - .docker/data/redis:/data
    restart: unless-stopped
    networks:
      - redis-network
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - server
  #     - websocket
  #   restart: unless-stopped

networks:
  db-network:
    driver: bridge
  redis-network:
    driver: bridge

volumes:
  postgres_data:
